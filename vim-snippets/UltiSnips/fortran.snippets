snippet sel
SELECT CASE(${1})

	CASE(${2})

		${3:source}

	CASE DEFAULT

		${0:source}

END SELECT
endsnippet

snippet st
WRITE(6, *) 'STOP EFFECTUE'
STOP
endsnippet

snippet prog
PROGRAM ${1:name}

USE outil

IMPLICIT NONE

${0}

END PROGRAM $1
endsnippet

snippet aut
!> @author Manuel Duarte
endsnippet

snippet dat
!> @date `date +'%d/%m/%y %H:%M:%S'`
endsnippet

snippet pin
!> @param[in] ${1}
endsnippet

snippet po
!> @param[out] ${1}
endsnippet

snippet bug
!> @bug ${1}
endsnippet

snippet des
!> @par Description
!> ${1}
endsnippet

snippet att
!> @attention ${1}
endsnippet

snippet todo
!> @todo ${1}
endsnippet

snippet ret
!> @return ${1}
endsnippet

snippet warn
!> @warning ${1}
endsnippet

snippet rem
!> @remarks ${1}
endsnippet

snippet gca
CALL GET_COMMAND_ARGUMENT (${1}, ${2})
${0}
endsnippet

snippet self
CLASS(${1}), INTENT(${2:INOUT}):: self
${0}
endsnippet

snippet dow
DO WHILE(${1})
	${0:source}
END DO
endsnippet

snippet mod
MODULE ${1:name}

USE outil

IMPLICIT NONE

CONTAINS

! #########################################################################
! #########################################################################

${0:SOURCE}

END MODULE $1
endsnippet

snippet class
MODULE ${1:name}_class

USE ${2}

IMPLICIT NONE

PRIVATE

PUBLIC:: $1

TYPE${3} $1

	PRIVATE${4}

	CONTAINS

		PRIVATE${5}

END TYPE $1

INTERFACE $1

	PROCEDURE constructor

END INTERFACE $1

CONTAINS

! #########################################################################
! #########################################################################
!> @author Manuel Duarte
!> @date `strftime('%d/%m/%y %H:%M:%S')`
!> @par Description
!> The constructor of the class.${6}
FUNCTION constructor ( ${7} )

USE ${8}

IMPLICIT NONE

TYPE( $1 ):: constructor

${9}

END FUNCTION constructor

! #########################################################################
! #########################################################################

${0}

END MODULE $1_class
endsnippet

snippet cons
FUNCTION constructor (${1})

USE outil

IMPLICIT NONE

TYPE(${2}):: constructor

${0}

END FUNCTION constructor
endsnippet

snippet int
INTERFACE ${1}
	${0}
END INTERFACE $1
endsnippet

snippet pro
PROCEDURE ${0}
endsnippet

snippet ci
CHARACTER(${1}), INTENT(${2}):: ${0}
endsnippet

snippet cai
CHARACTER(:), ALLOCATABLE, INTENT(${1}):: ${0}
endsnippet

snippet ca
CHARACTER(:), ALLOCATABLE:: ${0}
endsnippet

snippet cd
CHARACTER(${1}), DIMENSION(${2}):: ${0}
endsnippet

snippet cda
CHARACTER(${1}), DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet cdaa
CHARACTER(:), DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet cdaai
CHARACTER(:), DIMENSION(:), ALLOCATABLE, INTENT(${1}):: ${0}
endsnippet

snippet cdai
CHARACTER(${1}), DIMENSION(:), ALLOCATABLE, INTENT(${2}):: ${0}
endsnippet

snippet rda
REAL(kind=dp), DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet rdai
REAL(kind=dp), DIMENSION(:), ALLOCATABLE, INTENT(${1}):: ${0}
endsnippet

snippet r
REAL(kind=dp):: ${0}
endsnippet

snippet i
INTEGER(kind=ip):: ${0}
endsnippet

snippet ida
INTEGER(kind=ip), DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet lda
LOGICAL, DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet op
OPEN(${1}, file="${2}", action="${3}")${0}
endsnippet

snippet cl
CLOSE(${1})${0}
endsnippet

snippet wr
WRITE(${1}, ${2:*}) ${0}
endsnippet

snippet func
FUNCTION ${1} (${2})

USE ${3}

IMPLICIT NONE

${0}

END FUNCTION $1
endsnippet

snippet ri
REAL(kind=dp), INTENT(${1}):: ${0}
endsnippet

snippet al
ALLOCATE(${1})${0}
endsnippet

snippet c
CHARACTER(${1}):: ${0}
endsnippet

snippet l
LOGICAL:: ${0}
endsnippet

snippet rd
REAL(kind=dp), DIMENSION(${1}):: ${0}
endsnippet

snippet t
TYPE(${1}):: ${0}
endsnippet

snippet re
READ(${1}, ${2}) ${0}
endsnippet

snippet ti
TYPE(${1}), INTENT(${2}):: ${0}
endsnippet

snippet tdai
TYPE(${1}), DIMENSION(:), ALLOCATABLE, INTENT(${2}):: ${0}
endsnippet

snippet sub
SUBROUTINE ${1} (${2})

USE ${3}

IMPLICIT NONE

${0}

END SUBROUTINE $1
endsnippet

snippet tdi
TYPE(${1}), DIMENSION(${2}), INTENT(${3}):: ${0}
endsnippet

snippet ii
INTEGER(kind=ip), INTENT(${1}):: ${0}
endsnippet

snippet tda
TYPE(${1}), DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet rdi
REAL(kind=dp), DIMENSION(${1::}), INTENT(${2}):: ${0}
endsnippet

snippet bloc
! #########################################################################
! #########################################################################
endsnippet

snippet cdi
CHARACTER(${1}), DIMENSION(${2::}), INTENT(${3}):: ${0}
endsnippet

snippet %
self%
endsnippet

snippet cldi
CLASS(${1}), DIMENSION(${2}), INTENT(${3}):: ${0}
endsnippet

snippet idi
INTEGER(kind=ip), DIMENSION(${1}), INTENT(${2}):: ${0}
endsnippet

snippet li
LOGICAL, INTENT(${1}):: ${0}
endsnippet

snippet o
, OPTIONAL
endsnippet

snippet gep
GENERIC, PUBLIC:: ${0}
endsnippet

snippet dal
DEALLOCATE(${1})${0}
endsnippet

snippet idai
INTEGER(kind=ip), DIMENSION(:), ALLOCATABLE, INTENT(${1}):: ${0}
endsnippet

snippet ok
WRITE(*, * ) "ok"
endsnippet

snippet ldi
LOGICAL, DIMENSION(:), ALLOCATABLE:: ${0}
endsnippet

snippet pp
PROCEDURE, PUBLIC:: ${0}
endsnippet

snippet set
CALL constructor%set_${1}($1)${0}
endsnippet

snippet s
SUBROUTINE set_${1} (self, $1)

${2}

IMPLICIT NONE

CLASS(${3}), INTENT(INOUT):: self

${0}

END SUBROUTINE set_$1
endsnippet

snippet rp
REAL(kind=dp), PARAMETER:: ${0}
endsnippet

snippet txt
CALL txtcolor( &
	"${1}", &
	color=${2} &
)${0}
endsnippet
